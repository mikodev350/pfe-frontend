const DYNAMIC_CACHE_NAME = "dynamic-cache-v1";
const RESOURCE_CACHE_NAME = "resource-files";

// Installation du service worker et mise en cache initiale
self.addEventListener("install", (event) => {
  console.log("[Service Worker] Installation en cours...");
  event.waitUntil(
    caches.open(DYNAMIC_CACHE_NAME).then((cache) => {
      console.log("[Service Worker] Mise en cache des ressources initiales");
      return cache.addAll([
        "/", // La page d'accueil
        "/index.html", // La page principale
        "/static/js/bundle.js", // Le fichier JavaScript principal
        "/static/css/main.css", // Le fichier CSS principal
        // Ajoutez ici d'autres ressources critiques que vous souhaitez pré-cacher
      ]);
    })
  );
});

// Activation du service worker et nettoyage des anciens caches
self.addEventListener("activate", (event) => {
  console.log("[Service Worker] Activation en cours...");
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cache) => {
          if (cache !== DYNAMIC_CACHE_NAME && cache !== RESOURCE_CACHE_NAME) {
            console.log(
              `[Service Worker] Suppression de l'ancien cache: ${cache}`
            );
            return caches.delete(cache);
          }
        })
      );
    })
  );
  self.clients.claim();
});

// Interception des requêtes réseau
self.addEventListener("fetch", (event) => {
  const requestUrl = new URL(event.request.url);
  console.log(
    `[Service Worker] Interception de la requête: ${requestUrl.href}`
  );

  // Gérer les requêtes de fichiers multimédias
  if (
    requestUrl.pathname.endsWith(".jpg") ||
    requestUrl.pathname.endsWith(".png") ||
    requestUrl.pathname.endsWith(".pdf") ||
    requestUrl.pathname.endsWith(".mp4") ||
    requestUrl.pathname.endsWith(".mp3") ||
    requestUrl.pathname.endsWith(".txt")
  ) {
    event.respondWith(
      caches.open(RESOURCE_CACHE_NAME).then((cache) => {
        return cache
          .match(event.request)
          .then((cachedResponse) => {
            return (
              cachedResponse ||
              fetch(event.request).then((networkResponse) => {
                cache.put(event.request, networkResponse.clone());
                return networkResponse;
              })
            );
          })
          .catch(() => {
            return new Response("Offline and no cached data available", {
              status: 503,
              statusText: "Service Unavailable",
            });
          });
      })
    );
  } else {
    // Gérer les autres requêtes (HTML, JS, CSS, etc.)
    event.respondWith(
      fetch(event.request)
        .then((networkResponse) => {
          // Vérifiez si la réponse est valide (status 200) avant de la mettre en cache
          if (networkResponse && networkResponse.status === 200) {
            console.log("====================================");
            console.log("avatn le cachinggg ");
            console.log("====================================");
            return caches.open(DYNAMIC_CACHE_NAME).then((cache) => {
              console.log("====================================");
              console.log("mise en cahceee des element ");
              console.log("====================================");
              cache.put(event.request, networkResponse.clone());
              return networkResponse;
            });
          } else {
            return caches.match(event.request).then((cachedResponse) => {
              if (cachedResponse) {
                return cachedResponse;
              }
              return new Response(
                "Requête échouée et non disponible hors ligne",
                {
                  status: 503,
                  statusText: "Service Unavailable",
                }
              );
            });
          }
        })
        .catch(() => {
          return caches.match(event.request).then((cachedResponse) => {
            if (cachedResponse) {
              return cachedResponse;
            }
            return new Response(
              "Requête échouée et non disponible hors ligne",
              {
                status: 503,
                statusText: "Service Unavailable",
              }
            );
          });
        })
    );
  }
});

// self.addEventListener("fetch", (event) => {
//   const requestUrl = new URL(event.request.url);
//   console.log(
//     `[Service Worker] Interception de la requête: ${requestUrl.href}`
//   );

//   // Gérer les requêtes de fichiers multimédias
//   if (
//     requestUrl.pathname.endsWith(".jpg") ||
//     requestUrl.pathname.endsWith(".png") ||
//     requestUrl.pathname.endsWith(".pdf") ||
//     requestUrl.pathname.endsWith(".mp4") ||
//     requestUrl.pathname.endsWith(".mp3") ||
//     requestUrl.pathname.endsWith(".txt")
//   ) {
//     event.respondWith(
//       caches.open(RESOURCE_CACHE_NAME).then((cache) => {
//         return cache
//           .match(event.request)
//           .then((cachedResponse) => {
//             return (
//               cachedResponse ||
//               fetch(event.request).then((networkResponse) => {
//                 cache.put(event.request, networkResponse.clone());
//                 return networkResponse;
//               })
//             );
//           })
//           .catch(() => {
//             return new Response("Offline and no cached data available", {
//               status: 503,
//               statusText: "Service Unavailable",
//             });
//           });
//       })
//     );
//   } else {
//     // Gérer les autres requêtes (HTML, JS, CSS, etc.)
//     event.respondWith(
//       fetch(event.request)
//         .then((networkResponse) => {
//           return caches.open(DYNAMIC_CACHE_NAME).then((cache) => {
//             cache.put(event.request, networkResponse.clone());
//             return networkResponse;
//           });
//         })
//         .catch(() => {
//           return caches.match(event.request).then((cachedResponse) => {
//             if (cachedResponse) {
//               return cachedResponse; // Retourner la réponse mise en cache
//             } else {
//               // Si hors ligne, cacher la requête pour l'exécuter plus tard
//               return caches.open(DYNAMIC_CACHE_NAME).then((cache) => {
//                 cache.put(
//                   event.request,
//                   new Response(
//                     "Requête mise en cache pour exécution ultérieure"
//                   )
//                 );
//                 console.log("Requête mise en cache pour exécution ultérieure");
//                 return new Response(
//                   "Requête mise en cache, elle sera exécutée une fois en ligne.",
//                   {
//                     status: 202,
//                     statusText: "Accepted",
//                   }
//                 );
//               });
//             }
//           });
//         })
//     );
//   }
// });

self.addEventListener("push", (event) => {
  const data = event.data.json();
  const options = {
    body: data.body,
    icon: "./img/logo.png", // chemin vers votre icône
    // badge: "/path-to-badge/badge.png", // chemin vers votre badge
  };

  event.waitUntil(self.registration.showNotification(data.title, options));
});
